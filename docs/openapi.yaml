openapi: 3.0.3
info:
  title: 'The SideProject API'
  description: 'Start (and never finish) side projects with this API.'
  version: 1.0.0
servers:
  -
    url: 'http://testapi.com'
paths:
  /api/v1/languages:
    get:
      summary: ''
      operationId: getApiV1Languages
      description: ''
      parameters:
        -
          in: header
          name: Test
          description: ''
          example: Value
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example: []
      tags:
        - 'Dummy endpoints'
      security: []
  /api/file-input:
    post:
      summary: 'File input'
      operationId: fileInput
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Dummy endpoints'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                the_file:
                  type: string
                  format: binary
                  description: 'Just a file.'
                nested:
                  type: object
                  description: ''
                  example: []
                  properties:
                    _string:
                      type: string
                      description: 'A nested string.'
                      example: et
                    _file:
                      type: string
                      format: binary
                      description: 'A nested file.'
              required:
                - the_file
                - nested
      security: []
  /api/nested:
    post:
      summary: 'Nested fields'
      operationId: nestedFields
      description: ''
      parameters:
        -
          in: query
          name: random
          description: 'A random query parameter.'
          example: et
          required: false
          schema:
            type: string
            description: 'A random query parameter.'
            example: et
      responses: {  }
      tags:
        - 'Dummy endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: 'The data'
                  example: []
                  properties:
                    name:
                      type: string
                      description: 'A string field.'
                      example: et
                    size:
                      type: integer
                      description: 'A number.'
                      example: 5
                    other:
                      type: string
                      description: 'Optional thing.'
                      example: null
                    things:
                      type: array
                      description: 'An array of strings.'
                      example: null
                      items:
                        type: string
                    objects:
                      type: array
                      description: 'An array of objects'
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          a:
                            type: string
                            description: 'A field in the array of objects'
                            example: et
                          b:
                            type: string
                            description: 'A field in the array of objects'
                            example: et
              required:
                - data
      security: []
  /api/array-body:
    post:
      summary: 'Body content array'
      operationId: bodyContentArray
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Dummy endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: 'List of items'
              example:
                -
                  row_id: '700'
                  name: 'My item name'
              items:
                type: object
                properties:
                  row_id:
                    type: string
                    description: 'A unique ID.'
                    example: '700'
                  name:
                    type: string
                    description: 'An element name.'
                    example: 'My item name'
                required:
                  - name
      security: []
  /api/oooooi:
    post:
      summary: Other
      operationId: other
      description: 'I added this endpoint by creating a `custom.0.yaml` file in `.scribe`. See [the docs](https://scribe.knuckles.wtf/laravel/documenting/custom-endpoints).'
      parameters: []
      responses:
        200:
          description: 'Just for fun.'
          content:
            application/json:
              schema:
                type: object
                example:
                  hey: ho
                properties:
                  hey:
                    type: string
                    example: ho
                    description: 'Who knows?'
        204:
          description: 'Even more fun!'
      tags:
        - 'Dummy endpoints'
      security: []
  '/api/healthcheck/{unnecessaryParam}':
    get:
      summary: Healthcheck
      operationId: healthcheck
      description: "Check that the service is up. If everything is okay, you'll get a 200 OK response.\n\nOtherwise, the request will fail with a 400 error, and a response listing the failed services."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: up
                  services:
                    database: up
                    redis: up
                properties:
                  status:
                    type: string
                    example: up
                    description: 'The status of this API (`up` or `down`).'
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: up
                      redis:
                        type: string
                        example: up
        400:
          description: 'Service is unhealthy'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: down
                  services:
                    database: up
                    redis: down
                properties:
                  status:
                    type: string
                    example: down
                    description: 'The status of this API (`up` or `down`).'
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: up
                      redis:
                        type: string
                        example: down
      tags:
        - General
      security: []
    parameters:
      -
        in: path
        name: unnecessaryParam
        description: 'Optional parameter.'
        required: true
        schema:
          type: string
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: et
  /api/me:
    get:
      summary: ''
      operationId: getApiMe
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - General
      security: []
  /api/users:
    post:
      summary: 'Create a user'
      operationId: createAUser
      description: "This endpoint's body parameters are automatically generated from a FormRequest."
      parameters: []
      responses: {  }
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 1 character. Must not be greater than 255 characters.'
                  example: pidsgyfhasfdpmrg
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: julianne89@example.com
                password:
                  type: string
                  description: ''
                  example: '@.b8z4="e5,ZNa6'
              required:
                - name
                - email
                - password
      security: []
    get:
      summary: 'View all users'
      operationId: viewAllUsers
      description: "This endpoint uses a custom Scribe strategy that parses a\n`@usesPagination` annotation to add some query parameters.\n\nThe sample response is gotten by Scribe making a test API call (aka \"response call\")."
      parameters:
        -
          in: query
          name: page
          description: 'Page number to return. This parameter was added by a custom strategy.'
          example: 1
          required: false
          schema:
            type: string
            description: 'Page number to return. This parameter was added by a custom strategy.'
            example: 1
        -
          in: query
          name: pageSize
          description: 'Number of items to return in a page. Defaults to 10. This parameter was added by a custom strategy.'
          example: null
          required: false
          schema:
            type: string
            description: 'Number of items to return in a page. Defaults to 10. This parameter was added by a custom strategy.'
            example: null
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                properties:
                  data:
                    type: array
                    example: []
      tags:
        - Users
      security: []
  '/api/users/{id}':
    get:
      summary: 'Fetch a user'
      operationId: fetchAUser
      description: "This endpoint's response uses an Eloquent API resource, so we tell Scribe that using an annotation,\nand it figures out how to generate a sample. The 404 sample is gotten from a \"response file\"."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: 'Mr. Merlin Friesen'
                    email: hdoyle@example.com
                    side_projects:
                      -
                        id: 1
                        name: 'est numquam consequuntur'
                        description: 'Atque nobis ut natus aut dolores eveniet.'
                        url: null
                        due_at: 20270327
                        created_at: '2023-12-13T23:02:10.000000Z'
                        updated_at: '2023-12-13T23:02:10.000000Z'
                        user_id: 1
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Mr. Merlin Friesen'
                      email:
                        type: string
                        example: hdoyle@example.com
                      side_projects:
                        type: array
                        example:
                          -
                            id: 1
                            name: 'est numquam consequuntur'
                            description: 'Atque nobis ut natus aut dolores eveniet.'
                            url: null
                            due_at: 20270327
                            created_at: '2023-12-13T23:02:10.000000Z'
                            updated_at: '2023-12-13T23:02:10.000000Z'
                            user_id: 1
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'est numquam consequuntur'
                            description:
                              type: string
                              example: 'Atque nobis ut natus aut dolores eveniet.'
                            url:
                              type: string
                              example: null
                            due_at:
                              type: integer
                              example: 20270327
                            created_at:
                              type: string
                              example: '2023-12-13T23:02:10.000000Z'
                            updated_at:
                              type: string
                              example: '2023-12-13T23:02:10.000000Z'
                            user_id:
                              type: integer
                              example: 1
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not found'
                  resource: user
                properties:
                  message:
                    type: string
                    example: 'Not found'
                  resource:
                    type: string
                    example: user
      tags:
        - Users
      security: []
    delete:
      summary: 'Delete a user'
      operationId: deleteAUser
      description: ''
      parameters:
        -
          in: query
          name: confirm
          description: 'A really silly parameter'
          example: 'true'
          required: false
          schema:
            type: string
            description: 'A really silly parameter'
            example: 'true'
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "You've fucked up now!"
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: et
        required: true
        schema:
          type: string
  '/api/users/{id}/auth':
    post:
      summary: Authenticate
      operationId: authenticate
      description: "Get a new API token.\n\n<aside>Yes, we know you can impersonate any user.🙄</aside>"
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token: 2|KLDoUXc68Ko0JaFDZoX9qYkUqWglwdGxQsvTGBCg
                properties:
                  token:
                    type: string
                    example: 2|KLDoUXc68Ko0JaFDZoX9qYkUqWglwdGxQsvTGBCg
                    description: 'The new API token. Valid forever.'
      tags:
        - Users
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 13
        required: true
        schema:
          type: integer
  /api/side_projects:
    post:
      summary: 'Start a new side project'
      operationId: startANewSideProject
      description: "_Even though we both know you'll never finish it._\n\nThis endpoint's body parameters were automatically generated by Scribe\nfrom the controller's code. Check out the source! </aside>"
      parameters: []
      responses: {  }
      tags:
        - 'Side Projects'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of your side project. Must not be greater than 80 characters.'
                  example: 'The SideProject API'
                description:
                  type: string
                  description: 'A longer description of your side project. Must not be greater than 255 characters.'
                  example: 'Suscipit qui cumque magnam tenetur quia nemo.'
                url:
                  type: string
                  description: 'A url to your side project. Must be a valid URL.'
                  example: 'http://www.reilly.com/'
                due_at:
                  type: string
                  description: 'Due date for the side project. Must be a valid date. Must be a valid date in the format <code>Ymd</code>. Must be a date after <code>today</code>.'
                  example: '2085-06-01'
              required:
                - name
    get:
      summary: 'View all side projects'
      operationId: viewAllSideProjects
      description: "This endpoint's response was gotten via a \"response call\"—\nScribe called our API in a test environment to get a sample response."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example: []
      tags:
        - 'Side Projects'
      security: []
  '/api/side_projects/{id}':
    get:
      summary: 'View a side project'
      operationId: viewASideProject
      description: "This endpoint's response uses a Fractal transformer, so we tell Scribe that using an annotation,\nand it figures out how to generate a sample. The 404 sample is gotten from a \"response file\".\n\n<aside class=\"success\">Also, pretty cool: this endpoint's (and many others') URL parameters were figured out entirely by Scribe!</aside>\n\nAlso, this endpoint uses a mix of docblock tags and PHP 8 attributes."
      parameters: []
      responses:
        203:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    name: 'suscipit qui cumque'
                    description: 'Tenetur quia nemo sit est.'
                    due_date: 20260208
                    owner:
                      id: 1
                      name: 'Kurt Kub'
                      email: juvenal97@example.org
                      email_verified_at: '2023-12-13T23:02:10.000000Z'
                      created_at: '2023-12-13T23:02:10.000000Z'
                      updated_at: '2023-12-13T23:02:10.000000Z'
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'suscipit qui cumque'
                      description:
                        type: string
                        example: 'Tenetur quia nemo sit est.'
                      due_date:
                        type: integer
                        example: 20260208
                      owner:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'Kurt Kub'
                          email:
                            type: string
                            example: juvenal97@example.org
                          email_verified_at:
                            type: string
                            example: '2023-12-13T23:02:10.000000Z'
                          created_at:
                            type: string
                            example: '2023-12-13T23:02:10.000000Z'
                          updated_at:
                            type: string
                            example: '2023-12-13T23:02:10.000000Z'
        404:
          description: 'Side project not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not found'
                  resource: 'Side project'
                properties:
                  message:
                    type: string
                    example: 'Not found'
                  resource:
                    type: string
                    example: 'Side project'
      tags:
        - 'Side Projects'
      security: []
    put:
      summary: 'Update a side project'
      operationId: updateASideProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Side Projects'
      security: []
    delete:
      summary: 'Delete a side project'
      operationId: deleteASideProject
      description: ''
      parameters:
        -
          in: query
          name: queryThing
          description: null
          example: null
          required: false
          schema:
            type: string
            description: ''
            example: null
      responses:
        204:
          description: 'Nothing to see here'
        202:
          description: 'An extra, for fun.'
          content:
            application/json:
              schema:
                type: object
                nullable: true
      tags:
        - 'Side Projects'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the side project.'
        example: 13
        required: true
        schema:
          type: integer
  /api/side_projects/finish:
    post:
      summary: 'Finish a side project'
      operationId: finishASideProject
      description: 'Will you ever?🤔'
      parameters: []
      responses:
        404:
          description: 'Side project not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Not found'
                  resource: 'Side project'
                properties:
                  message:
                    type: string
                    example: 'Not found'
                  resource:
                    type: string
                    example: 'Side project'
      tags:
        - 'Side Projects'
      security: []
  /api/aCustomEndpoint:
    post:
      summary: 'A custom 2'
      operationId: aCustom2
      description: null
      parameters: []
      responses: {  }
      tags:
        - Extras
      security: []
tags:
  -
    name: 'Dummy endpoints'
    description: ''
  -
    name: General
    description: ''
  -
    name: Users
    description: ''
  -
    name: 'Side Projects'
    description: "\nAPIs for managing side projects.\n\nNote how the URL params for the endpoints here are automatically generated by Scribe."
  -
    name: Extras
    description: null
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by using the `users/auth` endpoint.'
security:
  -
    default: []
